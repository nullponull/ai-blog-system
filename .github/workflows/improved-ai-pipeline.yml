name: AI Article Generation & Publishing Pipeline

on:
  schedule:
    - cron: '15 */8 * * *'  # 8ÊôÇÈñì„Åî„Å®
  workflow_dispatch:

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g @google/gemini-cli
          mkdir -p _temp

      - name: Generate topic list for AI industry
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          
          # Generate list of current AI topics
          gemini -m "gemini-2.5-flash" --prompt "WebSearch: AIÊ•≠Áïå ÊúÄÊñ∞„Éã„É•„Éº„Çπ „Éà„É¨„É≥„Éâ Ë©±È°å 2025„ÄÇAIÊ•≠Áïå„ÅßÊ≥®ÁõÆ„Åï„Çå„Å¶„ÅÑ„ÇãÊúÄÊñ∞„ÅÆË©±È°å„Éª„Éà„É¨„É≥„Éâ„ÇíWebÊ§úÁ¥¢„ÅßË™øÊüª„Åó„ÄÅ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åß10ÂÄã„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Ë©±È°å„Çí„É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂêÑË©±È°å„ÅØ1Ë°å„Åß„ÄÅÁ∞°ÊΩî„Å´Ë°®Áèæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰æã: 1. OpenAI„ÅÆÊñ∞„É¢„Éá„É´Áô∫Ë°®, 2. Google DeepMind„ÅÆÁ†îÁ©∂ÊàêÊûú, 3. ÁîüÊàêAI„ÅÆ‰ºÅÊ•≠Â∞éÂÖ•‰∫ã‰æã, 4. AIË¶èÂà∂Ê≥ïÊ°à„ÅÆÂãïÂêë, 5. Ëá™ÂãïÈÅãËª¢ÊäÄË°ì„ÅÆÈÄ≤Â±ï...ÂÆüÈöõ„ÅÆÊ§úÁ¥¢ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂÖ∑‰ΩìÁöÑ„Å™‰ºÅÊ•≠Âêç„ÉªË£ΩÂìÅÂêç„Éª‰∫∫Âêç„ÇíÂê´„ÇÅ„ÅüÁèæÂÆüÁöÑ„Å™Ë©±È°å„Çí10ÂÄã„É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" > _temp/topics-list.txt
          
          echo "Generated topics list:"
          cat _temp/topics-list.txt

      - name: Generate articles for all topics
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          
          # Extract topics from the generated list
          TOPICS=$(grep -E "^[0-9]+\." _temp/topics-list.txt | head -8)
          echo "Available topics:"
          echo "$TOPICS"
          
          # Check for existing articles
          EXISTING_RECENT=""
          if ls _posts/*.md 1> /dev/null 2>&1; then
            EXISTING_RECENT=$(find _posts -name "*.md" -mtime -2 -exec grep -h "^title:" {} \; 2>/dev/null | head -10)
            echo "Recent titles for comparison:"
            echo "$EXISTING_RECENT" | head -5
          fi
          
          # Process topics
          TOPIC_INDEX=1
          ARTICLES_CREATED=0
          MAX_ARTICLES=6
          
          while IFS= read -r TOPIC_LINE; do
            if [ "$ARTICLES_CREATED" -ge "$MAX_ARTICLES" ]; then
              echo "‚úÖ Reached maximum articles limit"
              break
            fi
            
            if [ -z "$TOPIC_LINE" ]; then
              continue
            fi
            
            SELECTED_TOPIC=$(echo "$TOPIC_LINE" | sed 's/^[0-9]*\. *//')
            echo "üìù Processing topic: $SELECTED_TOPIC"
            
            # Simple duplicate check
            SKIP_TOPIC=false
            if [ ! -z "$EXISTING_RECENT" ]; then
              TOPIC_KEYWORDS=$(echo "$SELECTED_TOPIC" | tr '[:upper:]' '[:lower:]' | grep -oE '[a-zA-Z0-9„ÅÅ-„Çì„Ç°-„É∂‰∏Ä-ÈæØ]{3,}' | head -3)
              MATCH_COUNT=0
              for keyword in $TOPIC_KEYWORDS; do
                if echo "$EXISTING_RECENT" | grep -i -q "$keyword"; then
                  MATCH_COUNT=$((MATCH_COUNT + 1))
                fi
              done
              
              if [ "$MATCH_COUNT" -ge 2 ]; then
                echo "‚ö†Ô∏è  Potential duplicate detected, skipping"
                SKIP_TOPIC=true
              fi
            fi
            
            if [ "$SKIP_TOPIC" = false ]; then
              # Determine category
              CATEGORY="ÊúÄÊñ∞ÂãïÂêë"
              if [[ "$SELECTED_TOPIC" =~ (Á†îÁ©∂|Ë´ñÊñá|Â≠¶‰ºö) ]]; then
                CATEGORY="Á†îÁ©∂Ë´ñÊñá"
              elif [[ "$SELECTED_TOPIC" =~ (ÊäÄË°ì|„Ç¢„É´„Ç¥„É™„Ç∫„É†|‰ªïÁµÑ„Åø) ]]; then
                CATEGORY="ÊäÄË°ìËß£Ë™¨"
              elif [[ "$SELECTED_TOPIC" =~ (Â∞éÂÖ•|‰∫ã‰æã|Ê¥ªÁî®) ]]; then
                CATEGORY="ÂÆüË£Ö‰∫ã‰æã"
              elif [[ "$SELECTED_TOPIC" =~ (Â∏ÇÂ†¥|ÂàÜÊûê|‰∫àÊ∏¨) ]]; then
                CATEGORY="Ê•≠ÁïåÂàÜÊûê"
              fi
              
              # Generate article
              echo "Generating article for: $SELECTED_TOPIC"
              PROMPT="WebSearch: $(date '+%YÂπ¥%mÊúà%dÊó•') $SELECTED_TOPIC„ÄÇ„Äå$SELECTED_TOPIC„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊúÄÊñ∞ÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅALLFORCES AIÊÉÖÂ†±„É°„Éá„Ç£„Ç¢Âêë„Åë„ÅÆÂ∞ÇÈñÄË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöÂÆüÈöõ„ÅÆÊúÄÊñ∞ÊÉÖÂ†±„Å´Âü∫„Å•„ÅèÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ„ÄÅ‰ºÅÊ•≠Âêç„ÉªË£ΩÂìÅÂêç„Éª‰∫∫Âêç„ÉªÊï∞ÂÄ§„Éá„Éº„Çø„ÇíÊ≠£Á¢∫„Å´Ë®òËºâ„ÄÅÊäÄË°ìËÄÖ„ÉªÊäïË≥áÂÆ∂Âêë„Åë„ÅÆË©≥Á¥∞„Å™ÂàÜÊûê„ÄÅ3000-4000ÊñáÂ≠óÁ®ãÂ∫¶„ÄÅMarkdownÂΩ¢Âºè„ÅßÂá∫Âäõ„ÄÇÊßãÊàêÔºö# $SELECTED_TOPIC ## Ê¶ÇË¶Å„Å®ËÉåÊôØ ## Ë©≥Á¥∞„Å™ÊäÄË°ì„Éª„Éì„Ç∏„Éç„ÇπÂÜÖÂÆπ ## Â∏ÇÂ†¥„ÉªÁ´∂Âêà„Å∏„ÅÆÂΩ±Èüø ## ‰ªäÂæå„ÅÆÂ±ïÊúõ„ÄÇÂ∞ÇÈñÄÊÄß„Å®‰ø°È†ºÊÄß„ÇíÈáçË¶ñ„Åó„ÅüË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
              
              gemini -m "gemini-2.5-flash" --prompt "$PROMPT" > "_temp/article-${TOPIC_INDEX}.md"
              
              if [ -s "_temp/article-${TOPIC_INDEX}.md" ]; then
                # Create Jekyll post
                TITLE=$(echo "$SELECTED_TOPIC" | cut -c1-80)
                SLUG=$(echo "$SELECTED_TOPIC" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-50)
                FILENAME="$(date +%Y-%m-%d)-${TOPIC_INDEX}-${SLUG}.md"
                
                # Create front matter
                cat > "_posts/$FILENAME" << EOF
---
layout: post
title: "$TITLE"
date: $(date +%Y-%m-%d\ %H:%M:%S\ %z)
categories: ["$CATEGORY"]
tags: ["AI", "ÊúÄÊñ∞„Éã„É•„Éº„Çπ", "ÊäÄË°ìÂãïÂêë"]
author: "AIË®ò‰∫ãÁîüÊàê„Ç∑„Çπ„ÉÜ„É†"
excerpt: "AIÊ•≠Áïå„ÅÆÊúÄÊñ∞ÂãïÂêë„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
reading_time: 8
---
EOF
                
                # Add article content
                sed '1d' "_temp/article-${TOPIC_INDEX}.md" | sed '/^```markdown$/d' | sed '/^```$/d' >> "_posts/$FILENAME"
                
                echo "‚úÖ Created: $FILENAME"
                ARTICLES_CREATED=$((ARTICLES_CREATED + 1))
              else
                echo "‚ùå Failed to generate article"
              fi
            fi
            
            TOPIC_INDEX=$((TOPIC_INDEX + 1))
          done <<< "$TOPICS"
          
          echo "üìä Generation completed: $ARTICLES_CREATED articles created"

      - name: Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Build and Deploy
        run: |
          bundle install
          bundle exec jekyll build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Commit generated articles
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -n "$(git status --porcelain _posts/)" ]; then
            ARTICLE_COUNT=$(ls _posts/$(date +%Y-%m-%d)-*.md 2>/dev/null | wc -l)
            git add _posts/
            git commit -m "ü§ñ Add $ARTICLE_COUNT AI articles - $(date +%Y-%m-%d)"
            git push
            echo "‚úÖ Committed $ARTICLE_COUNT new articles"
          else
            echo "‚ÑπÔ∏è  No new articles to commit"
          fi