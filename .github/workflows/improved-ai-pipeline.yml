name: Simple AI Article Pipeline

on:
  schedule:
    - cron: '15 */8 * * *'
  workflow_dispatch:

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4
          pip install transformers torch sentence-transformers scikit-learn numpy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Node dependencies
        run: |
          npm install -g @google/gemini-cli
          mkdir -p _temp

      - name: Generate diverse topics
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          
          echo "üéØ Generating diverse AI topics..."
          gemini -m "gemini-2.5-flash" --prompt "WebSearch: AIÊ•≠Áïå ÊúÄÊñ∞„Éã„É•„Éº„Çπ „Éà„É¨„É≥„Éâ 2025„ÄÇ‰ª•‰∏ã„ÅÆÊù°‰ª∂„ÅßÂ§öÊßò„Å™AIÊ•≠Áïå„ÅÆË©±È°å„Çí12ÂÄãÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          Êù°‰ª∂Ôºö
          1. Áï∞„Å™„ÇãÂàÜÈáéÔºàÂåªÁôÇ„ÄÅÈáëËûç„ÄÅË£ΩÈÄ†Ê•≠„ÄÅ„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„Éà„Å™„Å©Ôºâ
          2. Áï∞„Å™„ÇãÊäÄË°ìÔºàLLM„ÄÅÁîªÂÉèÁîüÊàê„ÄÅÈü≥Â£∞„ÄÅ„É≠„Éú„ÉÜ„Ç£„ÇØ„Çπ„Å™„Å©Ôºâ
          3. ÂÖ∑‰ΩìÁöÑ„Å™‰ºÅÊ•≠Âêç„ÉªË£ΩÂìÅÂêç„ÉªÊï∞ÂÄ§„ÇíÂê´„ÇÄ
          4. ÊúÄÊñ∞„ÅÆÁô∫Ë°®„Éª„Éã„É•„Éº„Çπ„Å´Âü∫„Å•„Åè
          
          ÂΩ¢ÂºèÔºà1Ë°å„Åö„Å§ÔºâÔºö
          1. [ÂàÜÈáé] [‰ºÅÊ•≠Âêç] - [ÂÖ∑‰ΩìÁöÑÂÜÖÂÆπ]
          
          ‰æãÔºö
          1. ÂåªÁôÇAI Google DeepMind - AlphaFold3„ÅåÊñ∞Ëñ¨ÈñãÁô∫„Çí30%Âä†ÈÄüÂåñ
          2. ÈáëËûçAI JPMorgan - AIÊäïË≥á„Ç¢„É´„Ç¥„É™„Ç∫„É†„Åå15%„ÅÆ„É™„Çø„Éº„É≥ÈÅîÊàê
          
          „Åì„ÅÆ„Çà„ÅÜ„Å™ÂÖ∑‰ΩìÊÄß„ÅÆ„ÅÇ„Çã12„ÅÆË©±È°å„Çí„É™„Çπ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" > _temp/topics.txt
          
          echo "Generated topics:"
          head -15 _temp/topics.txt

      - name: Simple duplicate check and article generation
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          
          # Simple keyword-based duplicate check (relaxed)
          echo "üìù Starting article generation with relaxed duplicate checking..."
          
          TOPICS=$(grep -E "^[0-9]+\." _temp/topics.txt | head -8)
          echo "Topics to process:"
          echo "$TOPICS"
          
          # Get recent titles for comparison
          EXISTING_TITLES=""
          if ls _posts/*.md 1> /dev/null 2>&1; then
            EXISTING_TITLES=$(find _posts -name "*.md" -mtime -2 -exec grep -h "^title:" {} \; 2>/dev/null | sed 's/title: *//' | sed 's/"//g' | tr '[:upper:]' '[:lower:]' | head -20)
            echo "Recent titles for comparison:"
            echo "$EXISTING_TITLES" | head -5
          fi
          
          ARTICLES_CREATED=0
          MAX_ARTICLES=6
          
          echo "$TOPICS" | while IFS= read -r TOPIC_LINE; do
            if [ "$ARTICLES_CREATED" -ge "$MAX_ARTICLES" ]; then
              echo "‚úÖ Reached maximum articles: $MAX_ARTICLES"
              break
            fi
            
            if [ -z "$TOPIC_LINE" ]; then
              continue
            fi
            
            TOPIC=$(echo "$TOPIC_LINE" | sed 's/^[0-9]*\. *//')
            echo ""
            echo "üîç Processing: $TOPIC"
            
            # Simple similarity check - only skip if very similar
            SKIP=false
            if [ ! -z "$EXISTING_TITLES" ]; then
              # Extract key terms for comparison
              KEY_TERMS=$(echo "$TOPIC" | tr '[:upper:]' '[:lower:]' | grep -oE '[a-zA-Z0-9„ÅÅ-„Çì„Ç°-„É∂‰∏Ä-Èæ†]{3,}' | head -3)
              
              # Check if multiple key terms exist in recent titles
              MATCH_COUNT=0
              for term in $KEY_TERMS; do
                if echo "$EXISTING_TITLES" | grep -q "$term"; then
                  MATCH_COUNT=$((MATCH_COUNT + 1))
                fi
              done
              
              # Only skip if 2+ key terms match (very strict)
              if [ "$MATCH_COUNT" -ge 2 ]; then
                echo "‚ö†Ô∏è  Potential duplicate detected (matched terms: $MATCH_COUNT), skipping"
                SKIP=true
              else
                echo "‚úÖ Unique topic (matched terms: $MATCH_COUNT), proceeding"
              fi
            fi
            
            if [ "$SKIP" = false ]; then
              echo "üìù Generating article for: $TOPIC"
              
              # Determine category
              CATEGORY="ÊúÄÊñ∞ÂãïÂêë"
              if [[ "$TOPIC" =~ (Á†îÁ©∂|Ë´ñÊñá|Â≠¶‰ºö) ]]; then
                CATEGORY="Á†îÁ©∂Ë´ñÊñá"
              elif [[ "$TOPIC" =~ (ÊäÄË°ì|„Ç¢„É´„Ç¥„É™„Ç∫„É†|‰ªïÁµÑ„Åø) ]]; then
                CATEGORY="ÊäÄË°ìËß£Ë™¨"  
              elif [[ "$TOPIC" =~ (Â∞éÂÖ•|‰∫ã‰æã|Ê¥ªÁî®) ]]; then
                CATEGORY="ÂÆüË£Ö‰∫ã‰æã"
              elif [[ "$TOPIC" =~ (Â∏ÇÂ†¥|ÂàÜÊûê|‰∫àÊ∏¨) ]]; then
                CATEGORY="Ê•≠ÁïåÂàÜÊûê"
              fi
              
              # Generate article
              PROMPT=$(cat <<EOF
WebSearch: $(date '+%YÂπ¥%mÊúà%dÊó•') $TOPIC„ÄÇ„Äå$TOPIC„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊúÄÊñ∞ÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅALLFORCES AIÊÉÖÂ†±„É°„Éá„Ç£„Ç¢Âêë„Åë„ÅÆÂ∞ÇÈñÄË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

Ë¶Å‰ª∂Ôºö
- ÂÆüÈöõ„ÅÆÊúÄÊñ∞ÊÉÖÂ†±„Å´Âü∫„Å•„ÅèÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ
- ‰ºÅÊ•≠Âêç„ÉªË£ΩÂìÅÂêç„Éª‰∫∫Âêç„ÉªÊï∞ÂÄ§„Éá„Éº„Çø„ÇíÊ≠£Á¢∫„Å´Ë®òËºâ  
- ÊäÄË°ìËÄÖ„ÉªÊäïË≥áÂÆ∂Âêë„Åë„ÅÆË©≥Á¥∞„Å™ÂàÜÊûê
- 3000-4000ÊñáÂ≠óÁ®ãÂ∫¶
- MarkdownÂΩ¢Âºè„ÅßÂá∫Âäõ

ÊßãÊàêÔºö
# $TOPIC
## Ê¶ÇË¶Å„Å®ËÉåÊôØ
## Ë©≥Á¥∞„Å™ÊäÄË°ì„Éª„Éì„Ç∏„Éç„ÇπÂÜÖÂÆπ
## Â∏ÇÂ†¥„ÉªÁ´∂Âêà„Å∏„ÅÆÂΩ±Èüø
## ‰ªäÂæå„ÅÆÂ±ïÊúõ

Â∞ÇÈñÄÊÄß„Å®‰ø°È†ºÊÄß„ÇíÈáçË¶ñ„Åó„ÅüË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
EOF
)

              gemini -m "gemini-2.5-flash" --prompt "$PROMPT" > "_temp/article-$ARTICLES_CREATED.md"
              
              if [ -s "_temp/article-$ARTICLES_CREATED.md" ]; then
                # Create Jekyll post
                TITLE=$(echo "$TOPIC" | cut -c1-80)
                SLUG=$(echo "$TOPIC" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g' | cut -c1-50)
                FILENAME="$(date +%Y-%m-%d)-$((ARTICLES_CREATED + 1))-$SLUG.md"
                
                # Create front matter
                cat > "_posts/$FILENAME" <<EOF
---
layout: post
title: "$TITLE"
date: $(date '+%Y-%m-%d %H:%M:%S %z')
categories: ["$CATEGORY"]
tags: ["AI", "ÊúÄÊñ∞„Éã„É•„Éº„Çπ", "ÊäÄË°ìÂãïÂêë"]
author: "AIË®ò‰∫ãÁîüÊàê„Ç∑„Çπ„ÉÜ„É†"
excerpt: "AIÊ•≠Áïå„ÅÆÊúÄÊñ∞ÂãïÂêë„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
reading_time: 8
---

EOF
                
                # Add article content
                sed '1d' "_temp/article-$ARTICLES_CREATED.md" | sed '/^```markdown$/d' | sed '/^```$/d' >> "_posts/$FILENAME"
                
                echo "‚úÖ Created: $FILENAME"
                ARTICLES_CREATED=$((ARTICLES_CREATED + 1))
              else
                echo "‚ùå Failed to generate article"
              fi
            fi
          done
          
          echo ""
          echo "üìä Generation completed: $ARTICLES_CREATED articles created"

      - name: Setup Ruby and Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Build and Deploy
        run: |
          bundle install
          bundle exec jekyll build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Commit generated articles
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          if [ -n "$(git status --porcelain _posts/)" ]; then
            ARTICLE_COUNT=$(ls _posts/$(date +%Y-%m-%d)-*.md 2>/dev/null | wc -l)
            git add _posts/
            git commit -m "ü§ñ Add $ARTICLE_COUNT AI articles - $(date +%Y-%m-%d)"
            git push
            echo "‚úÖ Committed $ARTICLE_COUNT new articles"
          else
            echo "‚ÑπÔ∏è  No new articles to commit"
          fi