name: AI Article Generation & Publishing Pipeline

on:
  schedule:
    - cron: '15 */8 * * *'  # 8ÊôÇÈñì„Åî„Å®Ôºà3:15, 11:15, 19:15Ôºâ„Å´ÂÆüË°å
  workflow_dispatch:        # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull latest changes to avoid conflicts
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Pull latest changes from main branch
          echo "üì• Pulling latest changes from main branch..."
          git pull --rebase origin main || {
            echo "‚ö†Ô∏è  Rebase failed, attempting merge strategy..."
            git pull --no-rebase origin main || {
              echo "‚ùå Both rebase and merge failed, continuing with current state..."
              git status
            }
          }
          
          echo "‚úÖ Repository synchronized with latest changes"
          git log --oneline -3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          npm install -g @google/gemini-cli
          mkdir -p _temp

      - name: Generate topic list for AI industry
        id: generate_topics
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          DATE_STR=$(date '+%YÂπ¥%mÊúà%dÊó•')
          
          # Generate list of current AI topics
          gemini -m "gemini-2.5-flash" --prompt "WebSearch: AIÊ•≠Áïå ÊúÄÊñ∞„Éã„É•„Éº„Çπ „Éà„É¨„É≥„Éâ Ë©±È°å 2025„ÄÇAIÊ•≠Áïå„ÅßÊ≥®ÁõÆ„Åï„Çå„Å¶„ÅÑ„ÇãÊúÄÊñ∞„ÅÆË©±È°å„Éª„Éà„É¨„É≥„Éâ„ÇíWebÊ§úÁ¥¢„ÅßË™øÊüª„Åó„ÄÅ‰ª•‰∏ã„ÅÆÂΩ¢Âºè„Åß10ÂÄã„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Ë©±È°å„Çí„É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂêÑË©±È°å„ÅØ1Ë°å„Åß„ÄÅÁ∞°ÊΩî„Å´Ë°®Áèæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰æã: 1. OpenAI„ÅÆÊñ∞„É¢„Éá„É´Áô∫Ë°®, 2. Google DeepMind„ÅÆÁ†îÁ©∂ÊàêÊûú, 3. ÁîüÊàêAI„ÅÆ‰ºÅÊ•≠Â∞éÂÖ•‰∫ã‰æã, 4. AIË¶èÂà∂Ê≥ïÊ°à„ÅÆÂãïÂêë, 5. Ëá™ÂãïÈÅãËª¢ÊäÄË°ì„ÅÆÈÄ≤Â±ï...ÂÆüÈöõ„ÅÆÊ§úÁ¥¢ÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÂÖ∑‰ΩìÁöÑ„Å™‰ºÅÊ•≠Âêç„ÉªË£ΩÂìÅÂêç„Éª‰∫∫Âêç„ÇíÂê´„ÇÅ„ÅüÁèæÂÆüÁöÑ„Å™Ë©±È°å„Çí10ÂÄã„É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" > _temp/topics-list.txt
          
          echo "Generated topics list:"
          cat _temp/topics-list.txt

      - name: Generate articles for all topics
        id: generate_articles
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          DATE_STR=$(date '+%YÂπ¥%mÊúà%dÊó•')
          
          # Extract topics from the generated list
          TOPICS=$(grep -E "^[0-9]+\." _temp/topics-list.txt | head -10)
          echo "Available topics:"
          echo "$TOPICS"
          
          # Very minimal duplicate checking - only check recent articles (last 3 days)
          EXISTING_RECENT=""
          TODAY=$(date +%Y-%m-%d)
          echo "üìÖ Today's date: $TODAY"
          
          # Check articles from the last 1 day only to reduce false positives
          if ls _posts/*.md 1> /dev/null 2>&1; then
            EXISTING_RECENT=$(find _posts -name "*.md" -mtime -1 -exec grep -h "^title:" {} \; 2>/dev/null | head -10 || echo "")
            RECENT_COUNT=$(echo "$EXISTING_RECENT" | grep -c "^title:" || echo "0")
            echo "üìö Found $RECENT_COUNT existing articles in the last 1 day"
            if [ "$RECENT_COUNT" -gt 0 ]; then
              echo "Recent titles preview:"
              echo "$EXISTING_RECENT" | head -3
            fi
          else
            echo "üìù No existing articles found"
          fi
          
          # Process each topic with enhanced debugging
          TOPIC_INDEX=1
          ARTICLES_CREATED=0
          SKIPPED_COUNT=0
          MAX_ARTICLES=10
          
          echo "=== Starting article generation for $MAX_ARTICLES articles ==="
          echo "Topics to process:"
          echo "$TOPICS"
          
          # Use process substitution to avoid subshell variable scope issues
          while IFS= read -r TOPIC_LINE; do
            echo "--- Processing topic line: '$TOPIC_LINE' ---"
            
            # Limit to maximum number of articles
            if [ "$ARTICLES_CREATED" -ge "$MAX_ARTICLES" ]; then
              echo "‚úÖ Reached maximum articles limit ($MAX_ARTICLES), stopping."
              break
            fi
            
            # Skip empty lines
            if [ -z "$TOPIC_LINE" ]; then
              echo "‚è≠Ô∏è  Skipping empty line"
              continue
            fi
            
            SELECTED_TOPIC=$(echo "$TOPIC_LINE" | sed 's/^[0-9]*\. *//')
            echo "üìù Selected topic: '$SELECTED_TOPIC'"
            
            # Content-based duplicate checking - check for similar topics
            SKIP_TOPIC=false
            if [ ! -z "$EXISTING_RECENT" ]; then
              echo "üîç Checking for similar content..."
              
              # Extract key terms from the selected topic
              # Remove common particles and extract meaningful keywords
              TOPIC_KEYWORDS=$(echo "$SELECTED_TOPIC" | tr '[:upper:]' '[:lower:]' | \
                sed 's/[^a-zA-Z0-9„ÅÇ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ ]//g' | \
                awk '{for(i=1; i<=NF; i++) if(length($i) > 1) print $i}' | \
                grep -v -E '^(„ÅÆ|„Åå|„Çí|„ÅØ|„Å´|„Åß|„Å®|„Åã„Çâ|„Åæ„Åß|„Å´„Å§„ÅÑ„Å¶|„Å´Èñ¢„Åô„Çã|„Å´„Çà„Çã|„Å™„Å©|„ÄÅ|„ÄÇ|„Åì„Å®|„ÇÇ„ÅÆ|„Åì„Çå|„Åù„Çå|„Åæ„Åü|„Åï„Çâ„Å´|„Åù„Åó„Å¶|„Åó„Åã„Åó|„Åü„Å†„Åó|„Å™„Åä|„Åæ„Åü|‰∏ÄÊñπ)$' | \
                head -5)
              echo "üìù Topic keywords: $(echo "$TOPIC_KEYWORDS" | tr '\n' ' ')"
              
              # Check if any existing title contains similar keywords (2 or more matches)
              SIMILAR_FOUND=false
              echo "$EXISTING_RECENT" | while IFS= read -r EXISTING_TITLE; do
                if [ ! -z "$EXISTING_TITLE" ]; then
                  # Extract title content (remove "title: " prefix and quotes)
                  CLEAN_TITLE=$(echo "$EXISTING_TITLE" | sed 's/^title: *"//' | sed 's/"$//' | tr '[:upper:]' '[:lower:]')
                  
                  # Count matching keywords with weighted scoring
                  SCORE=0
                  MATCHED_KEYWORDS=""
                  for keyword in $TOPIC_KEYWORDS; do
                    if [ ${#keyword} -gt 2 ] && echo "$CLEAN_TITLE" | grep -q "$keyword"; then
                      # Higher weight for company names and technical terms
                      if echo "$keyword" | grep -E -q '(openai|google|microsoft|anthropic|meta|apple|tesla|nvidia|Ê©üÊ¢∞Â≠¶Áøí|Ê∑±Â±§Â≠¶Áøí|transformer|gpt|llm|Ëá™ÁÑ∂Ë®ÄË™û)'; then
                        SCORE=$((SCORE + 4))  # High weight for key AI terms
                        MATCHED_KEYWORDS="$MATCHED_KEYWORDS $keyword(+4)"
                      else
                        SCORE=$((SCORE + 1))  # Normal weight  
                        MATCHED_KEYWORDS="$MATCHED_KEYWORDS $keyword(+1)"
                      fi
                    fi
                  done
                  
                  # Only skip if we have very high similarity (8+ points) AND multiple keyword matches
                  # This ensures only truly duplicate content is skipped
                  KEYWORD_COUNT=$(echo "$MATCHED_KEYWORDS" | wc -w)
                  if [ "$SCORE" -ge 8 ] && [ "$KEYWORD_COUNT" -ge 3 ]; then
                    echo "‚ö†Ô∏è  Very high similarity found: '$CLEAN_TITLE'"
                    echo "üîç Matched keywords: $MATCHED_KEYWORDS (total score: $SCORE, keywords: $KEYWORD_COUNT)"
                    echo "SIMILAR_FOUND=true" > /tmp/similar_check
                  elif [ "$SCORE" -gt 0 ]; then
                    echo "üí° Some similarity: '$CLEAN_TITLE' (score: $SCORE, keywords: $KEYWORD_COUNT) - but proceeding"
                  fi
                fi
              done
              
              # Check result from subshell
              if [ -f /tmp/similar_check ]; then
                SIMILAR_FOUND=true
                rm -f /tmp/similar_check
              fi
              
              # Fallback mechanism: if we've skipped too many, force generation
              if [ "$SIMILAR_FOUND" = true ]; then
                SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
                if [ $ARTICLES_CREATED -lt 3 ] && [ $SKIPPED_COUNT -gt 4 ]; then
                  echo "üîì Fallback: Force generating to ensure minimum content (created: $ARTICLES_CREATED, skipped: $SKIPPED_COUNT)"
                  SIMILAR_FOUND=false
                fi
              fi
              
              if [ "$SIMILAR_FOUND" = true ]; then
                echo "‚è≠Ô∏è  Skipping similar topic: $SELECTED_TOPIC (skipped: $SKIPPED_COUNT)"
                SKIP_TOPIC=true
              else
                echo "‚úÖ Topic is unique, proceeding with generation"
              fi
            else
              echo "‚úÖ No recent articles to check, proceeding with generation"
            fi
            
            if [ "$SKIP_TOPIC" = true ]; then
              echo "‚è≠Ô∏è  Skipping duplicate topic"
              continue
            fi
            
            echo "Processing topic $TOPIC_INDEX: $SELECTED_TOPIC"
            
            # Determine category based on topic content
            CATEGORY="ÊúÄÊñ∞ÂãïÂêë"  # Default
            if [[ "$SELECTED_TOPIC" =~ (Á†îÁ©∂|Ë´ñÊñá|arXiv|Â≠¶‰ºö|Research|Paper) ]]; then
              CATEGORY="Á†îÁ©∂Ë´ñÊñá"
            elif [[ "$SELECTED_TOPIC" =~ (ÊäÄË°ì|„Ç¢„É´„Ç¥„É™„Ç∫„É†|‰ªïÁµÑ„Åø|ÂÆüË£Ö|ÈñãÁô∫|Technology|Algorithm) ]]; then
              CATEGORY="ÊäÄË°ìËß£Ë™¨"
            elif [[ "$SELECTED_TOPIC" =~ (Â∞éÂÖ•|‰∫ã‰æã|Ê¥ªÁî®|ROI|ÊàêÊûú|‰ºÅÊ•≠|Case|Implementation) ]]; then
              CATEGORY="ÂÆüË£Ö‰∫ã‰æã"
            elif [[ "$SELECTED_TOPIC" =~ (Â∏ÇÂ†¥|ÂàÜÊûê|‰∫àÊ∏¨|„Éà„É¨„É≥„Éâ|ÊäïË≥á|Market|Analysis|Trend) ]]; then
              CATEGORY="Ê•≠ÁïåÂàÜÊûê"
            elif [[ "$SELECTED_TOPIC" =~ („Éã„É•„Éº„Çπ|Áô∫Ë°®|„É™„É™„Éº„Çπ|News|Release|Áô∫Â£≤|Êñ∞Ë£ΩÂìÅ) ]]; then
              CATEGORY="ÊúÄÊñ∞ÂãïÂêë"
            fi
            
            echo "Selected category for '$SELECTED_TOPIC': $CATEGORY"
            
            # Generate category-specific prompts
            case $CATEGORY in
              "ÊúÄÊñ∞ÂãïÂêë")
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AIÊ•≠Áïå „Éã„É•„Éº„Çπ ‰ºÅÊ•≠Áô∫Ë°®„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅAIÊ•≠Áïå„ÅÆÊúÄÊñ∞ÂãïÂêë„Å®„Åó„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊúÄÊñ∞ÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅALLFORCES AIÊÉÖÂ†±„É°„Éá„Ç£„Ç¢„ÅÆË™≠ËÄÖÂêë„Åë„ÅÆË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöÂÆüÈöõ„ÅÆ„Éã„É•„Éº„Çπ„ÇÑ‰ºÅÊ•≠Áô∫Ë°®„Å´Âü∫„Å•„ÅèÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ„ÄÅÁô∫Ë°®Êó•ÊôÇ„Éª‰ºÅÊ•≠Âêç„Éª‰∫∫Âêç„ÉªÂÖ∑‰ΩìÁöÑÊï∞ÂÄ§„ÇíÊ≠£Á¢∫„Å´Ë®òËºâ„ÄÅÊäïË≥áÂÆ∂„ÇÑÊäÄË°ìËÄÖ„ÅåÁü•„Çä„Åü„ÅÑÊÉÖÂ†±„ÇíÁ∂≤ÁæÖ„ÄÅ3000-4000ÊñáÂ≠ó„ÄÅMarkdownÂΩ¢Âºè„ÄÇÊßãÊàêÔºö# ${SELECTED_TOPIC} ## „Éã„É•„Éº„ÇπÊ¶ÇË¶Å ## Áô∫Ë°®ÂÜÖÂÆπ„ÅÆË©≥Á¥∞ ## ÊäÄË°ìÁöÑËÉåÊôØ ## Â∏ÇÂ†¥„Å∏„ÅÆÂΩ±Èüø ## Á´∂Âêà‰ªñÁ§æ„ÅÆÂãïÂêë ## ‰ªäÂæå„ÅÆÂ±ïÊúõ"
                ;;
              "ÊäÄË°ìËß£Ë™¨")
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AI ÊäÄË°ìËß£Ë™¨ ‰ªïÁµÑ„Åø „Ç¢„É´„Ç¥„É™„Ç∫„É†„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅAIÊäÄË°ì„ÅÆË©≥Á¥∞Ëß£Ë™¨„Å®„Åó„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊúÄÊñ∞„ÅÆÊäÄË°ìÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅÊäÄË°ìËÄÖÂêë„Åë„ÅÆË©≥Á¥∞„Å™Ëß£Ë™¨Ë®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöÊäÄË°ìÁöÑ„Å™‰ªïÁµÑ„Åø„ÇíÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèËß£Ë™¨„ÄÅÊï∞Âºè„ÇÑ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÅÆË™¨Êòé„ÄÅÂÆüË£Ö‰æã„ÇÑÂøúÁî®‰∫ã‰æã„ÄÅË´ñÊñá„ÇÑÁ†îÁ©∂ÊàêÊûú„ÅÆÂºïÁî®„ÄÅ3500-4500ÊñáÂ≠ó„ÄÅMarkdownÂΩ¢Âºè„ÄÇÊßãÊàêÔºö# ${SELECTED_TOPIC} ## ÊäÄË°ìÊ¶ÇË¶Å ## „Ç¢„É´„Ç¥„É™„Ç∫„É†„ÅÆ‰ªïÁµÑ„Åø ## ÂÆüË£Ö‰∏ä„ÅÆËÄÉÊÖÆÁÇπ ## Êó¢Â≠òÊâãÊ≥ï„Å®„ÅÆÊØîËºÉ ## ÂøúÁî®‰∫ã‰æã ## ‰ªäÂæå„ÅÆÁô∫Â±ï"
                ;;
              "ÂÆüË£Ö‰∫ã‰æã") 
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AI Â∞éÂÖ•‰∫ã‰æã Ê¥ªÁî®‰∫ã‰æã ÊàêÊûú„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅAIÂÆüË£Ö„ÉªÂ∞éÂÖ•‰∫ã‰æã„Å®„Åó„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÂÆüÈöõ„ÅÆÊ¥ªÁî®‰∫ã‰æã„ÇíË™øÊüª„Åó„ÄÅÂÆüË∑µÁöÑ„Å™Ë®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöÂÖ∑‰ΩìÁöÑ„Å™Â∞éÂÖ•‰ºÅÊ•≠Âêç„ÉªÊ•≠Áïå„ÉªË¶èÊ®°„ÄÅÂ∞éÂÖ•ÂâçÂæå„ÅÆÂäπÊûúÊ∏¨ÂÆö„ÄÅÊäÄË°ìÁöÑÂÆüË£ÖÊñπÊ≥ï„ÄÅROI„ÇÑÊàêÊûúÊåáÊ®ô„ÄÅË™≤È°å„Å®Ëß£Ê±∫Á≠ñ„ÄÅ3000-4000ÊñáÂ≠ó„ÄÅMarkdownÂΩ¢Âºè„ÄÇÊßãÊàêÔºö# ${SELECTED_TOPIC} ## ‰∫ã‰æãÊ¶ÇË¶Å ## Â∞éÂÖ•ËÉåÊôØ„Å®Ë™≤È°å ## ÊäÄË°ìÂÆüË£Ö„ÅÆË©≥Á¥∞ ## Â∞éÂÖ•ÂäπÊûú„Å®ÊàêÊûú ## Ë™≤È°å„Å®ÂØæÂøúÁ≠ñ ## ‰ªñÊ•≠Áïå„Å∏„ÅÆÂøúÁî®ÂèØËÉΩÊÄß"
                ;;
              "Ê•≠ÁïåÂàÜÊûê")
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AI Ê•≠ÁïåÂàÜÊûê Â∏ÇÂ†¥ÂãïÂêë „Éà„É¨„É≥„Éâ„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅÁâπÂÆöÊ•≠Áïå„ÅÆAIÊ¥ªÁî®ÂãïÂêëÂàÜÊûê„Å®„Åó„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊ•≠ÁïåÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅÊà¶Áï•ÁöÑ„Å™ÂàÜÊûêË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöÂ∏ÇÂ†¥Ë¶èÊ®°„ÉªÊàêÈï∑Áéá„Éª‰∏ªË¶Å„Éó„É¨„Ç§„É§„ÉºÂàÜÊûê„ÄÅÊäÄË°ì„Éà„É¨„É≥„Éâ„Å®Ê¥ªÁî®„Éë„Çø„Éº„É≥„ÄÅË¶èÂà∂ÂãïÂêë„ÄÅÊäïË≥áÂãïÂêë„ÄÅÁ´∂ÂêàÁä∂Ê≥Å„ÄÅ3500-4500ÊñáÂ≠ó„ÄÅMarkdownÂΩ¢Âºè„ÄÇÊßãÊàêÔºö# ${SELECTED_TOPIC} ## Ê•≠ÁïåÊ¶ÇÊ≥Å ## AIÊ¥ªÁî®„ÅÆÁèæÁä∂ ## ‰∏ªË¶Å‰ºÅÊ•≠„ÅÆÂèñ„ÇäÁµÑ„Åø ## ÊäÄË°ì„Éà„É¨„É≥„Éâ ## Â∏ÇÂ†¥‰∫àÊ∏¨ ## ÊäïË≥á„ÉªË¶èÂà∂ÂãïÂêë"
                ;;
              "Á†îÁ©∂Ë´ñÊñá")
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AI Ë´ñÊñá Á†îÁ©∂ Â≠¶‰ºö arXiv„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶„ÄÅAIÁ†îÁ©∂Ë´ñÊñá„ÅÆËß£Ë™¨„Å®„Åó„Å¶„ÄÅWebÊ§úÁ¥¢„ÅßÊúÄÊñ∞„ÅÆÁ†îÁ©∂ÊÉÖÂ†±„ÇíË™øÊüª„Åó„ÄÅÁ†îÁ©∂ËÄÖ„ÉªÊäÄË°ìËÄÖÂêë„Åë„ÅÆË´ñÊñáËß£Ë™¨Ë®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË¶Å‰ª∂ÔºöË´ñÊñá„ÅÆÊñ∞Ë¶èÊÄß„Å®Ë≤¢ÁåÆ„ÇíÊòéÁ¢∫Âåñ„ÄÅÊâãÊ≥ï„ÉªÂÆüÈ®ìÁµêÊûú„ÅÆË©≥Á¥∞Ë™¨Êòé„ÄÅÊó¢Â≠òÁ†îÁ©∂„Å®„ÅÆÊØîËºÉ„ÄÅÂÆüÁî®Âåñ„ÅÆÂèØËÉΩÊÄß„ÄÅÊâπÂà§ÁöÑË©ï‰æ°„ÄÅ3500-4500ÊñáÂ≠ó„ÄÅMarkdownÂΩ¢Âºè„ÄÇÊßãÊàêÔºö# ${SELECTED_TOPIC} ## Á†îÁ©∂Ê¶ÇË¶Å ## ÊèêÊ°àÊâãÊ≥ï ## ÂÆüÈ®ìÁµêÊûú„Å®Ë©ï‰æ° ## Êó¢Â≠òÁ†îÁ©∂„Å®„ÅÆÊØîËºÉ ## ÂÆüÁî®Âåñ„Å∏„ÅÆÈÅìÁ≠ã ## ‰ªäÂæå„ÅÆÁ†îÁ©∂Ë™≤È°å"
                ;;
              *)
                PROMPT="WebSearch: ${DATE_STR} ${SELECTED_TOPIC} AIÊ•≠Áïå„ÄÇ„Äå${SELECTED_TOPIC}„Äç„Å´„Å§„ÅÑ„Å¶WebÊ§úÁ¥¢„ÅßË™øÊüª„Åó„ÄÅË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                ;;
            esac
            
            # Generate article based on category-specific prompt
            echo "Generating article for topic: $SELECTED_TOPIC (Category: $CATEGORY)"
            gemini -m "gemini-2.5-flash" --prompt "$PROMPT" > "_temp/article-${TOPIC_INDEX}.md"
            
            # „ÇÇ„Åógemini-cli„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
            if [ ! -f "_temp/article-${TOPIC_INDEX}.md" ] || [ ! -s "_temp/article-${TOPIC_INDEX}.md" ]; then
              echo "Failed to generate article for topic: $SELECTED_TOPIC"
              TOPIC_INDEX=$((TOPIC_INDEX + 1))
              continue
            fi
            
            # Create the final article file
            echo "Creating final article file for: $SELECTED_TOPIC"
            
            # Ë®ò‰∫ã„Çø„Ç§„Éà„É´„ÇíÂèñÂæóÔºà„Çà„ÇäÂ†ÖÁâ¢„Å™Âá¶ÁêÜÔºâ
            TITLE=$(grep -m 1 "^# " "_temp/article-${TOPIC_INDEX}.md" | sed 's/^# //' | sed 's/[[:space:]]*$//')
            
            # „Çø„Ç§„Éà„É´„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØË©±È°å„Éô„Éº„Çπ„ÅÆ„Çø„Ç§„Éà„É´„Çí‰ΩøÁî®
            if [ -z "$TITLE" ] || [ "$TITLE" = "markdown" ] || [[ "$TITLE" == *'```'* ]]; then
              TITLE="$SELECTED_TOPIC"
            fi
            
            # „Éï„Ç°„Ç§„É´ÂêçÁî®„Å´„Çø„Ç§„Éà„É´„ÇíÂ§âÊèõ
            SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            
            # Êó•‰ªò„Éô„Éº„Çπ„ÅÆ„Éï„Ç°„Ç§„É´ÂêçÔºàÈáçË§á„ÇíÈÅø„Åë„Çã„Åü„ÇÅÁï™Âè∑„ÇíËøΩÂä†Ôºâ
            FILENAME="$(date +%Y-%m-%d)-${TOPIC_INDEX}-$SLUG.md"
            
            # „Ç´„ÉÜ„Ç¥„É™Âà•„ÅÆ„Çø„Ç∞„Å®excerpt„ÇíË®≠ÂÆö
            case $CATEGORY in
              "ÊúÄÊñ∞ÂãïÂêë")
                TAGS='["AI", "ÊúÄÊñ∞„Éã„É•„Éº„Çπ", "Ê•≠ÁïåÂãïÂêë", "‰ºÅÊ•≠Áô∫Ë°®"]'
                EXCERPT="AIÊ•≠Áïå„ÅÆÊúÄÊñ∞ÂãïÂêë„Å´„Å§„ÅÑ„Å¶„ÄÅ‰ºÅÊ•≠Áô∫Ë°®„ÇÑÊ•≠Áïå„Éã„É•„Éº„Çπ„ÇíÂü∫„Å´Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
                ;;
              "ÊäÄË°ìËß£Ë™¨")
                TAGS='["AI", "ÊäÄË°ìËß£Ë™¨", "„Ç¢„É´„Ç¥„É™„Ç∫„É†", "ÂÆüË£Ö"]'
                EXCERPT="AIÊäÄË°ì„ÅÆ‰ªïÁµÑ„Åø„Å®„Ç¢„É´„Ç¥„É™„Ç∫„É†„Å´„Å§„ÅÑ„Å¶„ÄÅÊäÄË°ìÁöÑ„Å™Ë¶≥ÁÇπ„Åã„ÇâË©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
                ;;
              "ÂÆüË£Ö‰∫ã‰æã")
                TAGS='["AI", "Â∞éÂÖ•‰∫ã‰æã", "ÂÆüË£Ö", "ROI"]'
                EXCERPT="‰ºÅÊ•≠„ÅÆAIÂ∞éÂÖ•‰∫ã‰æã„Å®ÂÆüË£ÖÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÄÅÂÖ∑‰ΩìÁöÑ„Å™ÊàêÊûú„ÇíÂê´„ÇÅ„Å¶Ëß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
                ;;
              "Ê•≠ÁïåÂàÜÊûê")
                TAGS='["AI", "Â∏ÇÂ†¥ÂàÜÊûê", "„Éà„É¨„É≥„Éâ", "ÊäïË≥á"]'
                EXCERPT="AIÊ•≠Áïå„ÅÆÂ∏ÇÂ†¥ÂãïÂêë„Å®Â∞ÜÊù•Â±ïÊúõ„Å´„Å§„ÅÑ„Å¶„ÄÅ„Éá„Éº„Çø„Å´Âü∫„Å•„ÅÑ„Å¶ÂàÜÊûê„Åó„Åæ„Åô„ÄÇ"
                ;;
              "Á†îÁ©∂Ë´ñÊñá")
                TAGS='["AI", "Á†îÁ©∂Ë´ñÊñá", "Â≠¶Ë°ì", "ÊúÄÊñ∞Á†îÁ©∂"]'
                EXCERPT="AIÂàÜÈáé„ÅÆÊúÄÊñ∞Á†îÁ©∂Ë´ñÊñá„Å´„Å§„ÅÑ„Å¶„ÄÅÊäÄË°ìÁöÑ„Å™ÂÜÖÂÆπ„ÇíÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
                ;;
              *)
                TAGS='["AI", "Ê©üÊ¢∞Â≠¶Áøí", "ÊäÄË°ìËß£Ë™¨", "ÊúÄÊñ∞Á†îÁ©∂"]'
                EXCERPT="ÊúÄÊñ∞„ÅÆAIÊäÄË°ìÂãïÂêë„Å´„Å§„ÅÑ„Å¶„ÄÅGoogleÊ§úÁ¥¢„ÅßË™øÊüª„Åó„ÅüÊúÄÊñ∞ÊÉÖÂ†±„ÇíÂü∫„Å´Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ"
                ;;
            esac
            
            # Front matter„Çí‰ΩúÊàê
            cat > "_posts/$FILENAME" << EOF
          ---
          layout: post
          title: "$TITLE"
          date: $(date +%Y-%m-%d\ %H:%M:%S\ %z)
          categories: ["$CATEGORY"]
          tags: $TAGS
          author: "AIË®ò‰∫ãÁîüÊàê„Ç∑„Çπ„ÉÜ„É†"
          excerpt: "$EXCERPT"
          reading_time: 8
          ---
          EOF
            
            # Ë®ò‰∫ãÊú¨Êñá„ÇíËøΩÂä†Ôºàmarkdown„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØË®òÂè∑„ÇíÈô§ÂéªÔºâ
            sed '1d' "_temp/article-${TOPIC_INDEX}.md" | sed '/^```markdown$/d' | sed '/^```$/d' >> "_posts/$FILENAME"
            
            echo "‚úÖ Generated article $TOPIC_INDEX: $FILENAME"
            echo "üìÑ Title: $TITLE"
            echo "üìÇ Category: $CATEGORY"
            
            TOPIC_INDEX=$((TOPIC_INDEX + 1))
            ARTICLES_CREATED=$((ARTICLES_CREATED + 1))
            
            echo "üìà Articles created so far: $ARTICLES_CREATED/$MAX_ARTICLES"
            echo ""
          done <<< "$TOPICS"
          
          echo "=== Article generation completed ==="
          echo "‚úÖ Successfully created $ARTICLES_CREATED articles out of $MAX_ARTICLES maximum"
          echo "üìä Statistics: Created: $ARTICLES_CREATED, Skipped (duplicates): $SKIPPED_COUNT"

      - name: Lint and Fix Generated Articles
        run: |
          # textlint„ÅßË®ò‰∫ã„ÇíÊ†°Ê≠£Ôºà„Ç®„É©„Éº„Åå„ÅÇ„Å£„Å¶„ÇÇÁ∂ôÁ∂öÔºâ
          for article_file in _temp/article-*.md; do
            if [ -f "$article_file" ]; then
              npx textlint "$article_file" --fix || echo "Textlint completed with warnings for $article_file"
            fi
          done


      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Install Jekyll dependencies
        run: |
          # Gemfile„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„ÅÆ„Åß„ÄÅbundler„Åß‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
          bundle install

      - name: Build with Jekyll
        run: bundle exec jekyll build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 300000  # 5 minute timeout

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add _posts/*
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            ARTICLE_COUNT=$(find _posts -name "$(date +%Y-%m-%d)-*.md" | wc -l)
            git commit -m "feat: Add $ARTICLE_COUNT new AI articles - $(date +%Y-%m-%d)"
            git push
          fi