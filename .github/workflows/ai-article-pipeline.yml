name: AI Article Generation & Publishing Pipeline

on:
  schedule:
    - cron: '0 9 * * *'  # 毎日9時に実行
  workflow_dispatch:      # 手動実行も可能

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          npm install -g @google/gemini-cli
          mkdir -p _temp

      - name: Generate AI Article with Gemini CLI (with web search)
        id: generate_article
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Configure Gemini CLI with API key
          export GEMINI_API_KEY="$GEMINI_API_KEY"
          
          # Generate article with direct web search
          DATE_STR=$(date '+%Y年%m月%d日')
          
          gemini -m "gemini-2.5-flash" --prompt "WebSearch: ${DATE_STR} AI業界 最新ニュース 企業動向 研究成果 新サービス。今日(${DATE_STR})のAI業界の最新ニュースをWeb検索して調査し、技術者向けの詳細な記事を日本語で作成してください。要件：実際の最新検索結果に基づいた具体的で詳細な内容、企業動向・研究成果・新サービス・規制動向など多様なトピック、自然な日本語表現（AI特有の機械的表現は避ける）、3000-4000文字程度、Markdown形式で出力（ただしコードブロック記号は使わない）。構成例：# ${DATE_STR}のAI業界ニュース ## 企業・市場の動き ### [検索結果から得た具体的な企業名と発表内容] ## 研究開発の進展 ### [検索結果から得た大学・研究機関の具体的な成果] ## 新サービス・製品の発表 ### [検索結果から得た実際のサービス名と機能] ## 市場動向と投資の状況 ### [検索結果から得た投資額や市場予測の具体的データ] ## 規制・ガイドラインの動き ### [検索結果から得た政府・規制機関の動向] ## 今後の業界動向。Web検索で得た最新情報を基に、技術的な詳細、具体的な数値、企業名、人名などを含めてリアルなニュース記事として作成してください。" > _temp/new-article.md
          
          # もしgemini-cliが失敗した場合はPythonスクリプトにフォールバック
          if [ ! -f "_temp/new-article.md" ] || [ ! -s "_temp/new-article.md" ]; then
            echo "Gemini CLI failed, falling back to Python script"
            python generate_article_standalone.py
          fi

      - name: Lint and Fix Generated Article
        run: |
          # textlintで記事を校正（エラーがあっても継続）
          if [ -f "_temp/new-article.md" ]; then
            npx textlint _temp/new-article.md --fix || echo "Textlint completed with warnings"
          else
            echo "Article file not found, skipping textlint"
          fi

      - name: Create final article file
        run: |
          # 記事タイトルを取得（より堅牢な処理）
          TITLE=$(grep -m 1 "^# " _temp/new-article.md | sed 's/^# //' | sed 's/[[:space:]]*$//')
          
          # タイトルが取得できない場合は日付ベースのタイトルを使用
          if [ -z "$TITLE" ] || [ "$TITLE" = "markdown" ] || [[ "$TITLE" == *"```"* ]]; then
            TITLE="${DATE_STR}のAI業界ニュース"
          fi
          
          # ファイル名用にタイトルを変換
          SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          # 日付ベースのファイル名
          FILENAME="$(date +%Y-%m-%d)-$SLUG.md"
          
          # Front matterを作成
          cat > "_posts/$FILENAME" << EOF
          ---
          layout: post
          title: "$TITLE"
          date: $(date +%Y-%m-%d\ %H:%M:%S\ %z)
          categories: ["AI技術", "最新動向"]
          tags: ["AI", "機械学習", "技術解説", "最新研究"]
          author: "AI記事生成システム"
          excerpt: "最新のAI技術動向について、Google検索で調査した最新情報を基に詳しく解説します。"
          reading_time: 8
          ---
          EOF
          
          # 記事本文を追加（markdownコードブロック記号を除去）
          sed '1d' _temp/new-article.md | sed '/^```markdown$/d' | sed '/^```$/d' >> "_posts/$FILENAME"
          
          echo "Generated article: $FILENAME"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Install Jekyll dependencies
        run: |
          # Gemfileが既に存在するので、bundlerで依存関係をインストール
          bundle install

      - name: Build with Jekyll
        run: bundle exec jekyll build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
          force_orphan: true

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add _posts/*
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat: Add new AI article - $(date +%Y-%m-%d)"
            git push
          fi